// testbench

`timescale 1ns/1ps

module tb_i2s_waveform;
    parameter WORD_WIDTH = 8;
    reg clk, rst_n;
    reg [WORD_WIDTH-1:0] tx_left, tx_right;
    wire [WORD_WIDTH-1:0] rx_left, rx_right;
    wire rx_done;
    wire lrclk;

    initial clk = 0;
    always #5 clk = ~clk;

    i2s_top #(.WORD_WIDTH(WORD_WIDTH)) dut (
        .clk(clk),
        .rst_n(rst_n),
        .tx_left(tx_left),
        .tx_right(tx_right),
        .rx_left(rx_left),
        .rx_right(rx_right),
        .rx_done(rx_done),
        .lrclk(lrclk)
    );

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_i2s_waveform); 
    end

    initial begin
        rst_n = 0; tx_left = 0; tx_right = 0;
        #20 rst_n = 1;
        #10;

        tx_left  = 8'b10101010; tx_right = 8'b01010101; #400;
        tx_left  = 8'b11101100; tx_right = 8'b01110011; #400;
        tx_left  = 8'b11001000; tx_right = 8'b00110010; #400;
        tx_left  = 8'b11001101; tx_right = 8'b00110001; #400;
        tx_left  = 8'b11001101; tx_right = 8'b00111011; #400;
        tx_left  = 8'b11001000; tx_right = 8'b00111011; #400;
        tx_left  = 8'b11000100; tx_right = 8'b10110011; #400;
        #800;
        $finish;
    end
    logic rx_done_d;
    always @(posedge clk) rx_done_d <= rx_done;

    always @(posedge clk) begin
        if(rx_done && !rx_done_d) begin
            $display("[%0t] RX_DONE | LEFT=%b | RIGHT=%b | LRCLK=%b", 
                      $time, rx_left, rx_right, lrclk);
        end
    end

endmodule
